<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>tips on Bitten By Python</title>
    <link>http://www.bittenbypython.com/tags/tips/</link>
    <description>Recent content in tips on Bitten By Python</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr-fr</language>
    <lastBuildDate>Mon, 22 Jan 2018 18:16:00 +0100</lastBuildDate><atom:link href="http://www.bittenbypython.com/tags/tips/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comment et pourquoi utiliser les notebook Jupyter</title>
      <link>http://www.bittenbypython.com/posts/20180122_jupyter_notebook/</link>
      <pubDate>Mon, 22 Jan 2018 18:16:00 +0100</pubDate>
      
      <guid>http://www.bittenbypython.com/posts/20180122_jupyter_notebook/</guid>
      <description>Hello !
Vous avez peut être entendu parler des notebook de Jupyter et si comme moi, vous vous êtes demandé à quoi bon cela peut bien servir, je vais vous aider à y voir un peu plus clair.
Déjà, à quoi ils ressemblent ? Vous pouvez trouver une large galerie d&amp;rsquo;exemple ici.
Voyons un peu ce que on peut en faire.
Cas d&amp;rsquo;utilisation Les notebook ressemblent finalement à des pages Web dynamique, avec des champs que l&amp;rsquo;on peut exécuter et voir le résultat en direct.</description>
    </item>
    
    <item>
      <title>Cheatsheet de challenge</title>
      <link>http://www.bittenbypython.com/posts/20171216-challenge/</link>
      <pubDate>Sat, 16 Dec 2017 13:37:00 +0100</pubDate>
      
      <guid>http://www.bittenbypython.com/posts/20171216-challenge/</guid>
      <description>Hello,
A force de faire quelques challenge sur HackerRank, j&amp;rsquo;ai noté quelques tricks que j&amp;rsquo;oublie souvent. Du coup, je met ça içi. Servez-vous :-)
list et set intersection de deux listes Récupérer l&amp;rsquo;intersection entre deux listes (en fait, uniquement si l&amp;rsquo;une des deux peut être transformée en set):
a = [&amp;#39;un&amp;#39;, &amp;#39;deux&amp;#39;, &amp;#39;trois&amp;#39;] b = [&amp;#39;dites&amp;#39;, &amp;#39;trente&amp;#39;, &amp;#39;trois&amp;#39;] inter = list(filter(set(a).__contains__, b)) Résultat :
print(inter) [&amp;#39;trois&amp;#39;] module itertools toutes les combinaisons d&amp;rsquo;une liste de listes Imaginons que j&amp;rsquo;ai une méga liste qui contient des listes:</description>
    </item>
    
  </channel>
</rss>
